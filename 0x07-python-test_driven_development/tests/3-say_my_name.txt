================================
Test cases for 3-say_my_name.py
================================
This program will print the first and last name given
with the pre-set format.

import module:
    >>> say_my_name =__import__('3-say_my_name').say_my_name

Test Cases
===========
This program will print the arguments given in
the pre-set format. The arguments must be a string.

Testing Both arguments
-----------------------

    >>> say_my_name("John", "Smith")
    My name is John Smith
    >>> say_my_name("Walter", "White")
    My name is Walter White

Testing with white spaces
--------------------------

    >>> say_my_name("John ", "Smith")
    My name is John  Smith

    >>> say_my_name("John ", "Smith ")
    My name is John  Smith 

Testing with Empty strings
--------------------------

    >>> say_my_name("", "")
    My name is  

Testing with a new line
-----------------------

# doctest_blankline.py

    >>> say_my_name("Phil\n", "Clinton\n")
    My name is Phil
     Clinton
    <BLANKLINE>

TypeErrors
===========
This program can only take strings as arguments

Test with integer in first argument
------------------------------------

    >>> say_my_name(1, "John")
    Traceback (most recent call last):
    TypeError: first_name must be a string

Test with float in first argument
----------------------------------

    >>> say_my_name(1.00, "John")
    Traceback (most recent call last):
    TypeError: first_name must be a string

Test with list in first argument
---------------------------------

    >>> say_my_name(['A', 'n', 'a'], "Rocha")
    Traceback (most recent call last):
    TypeError: first_name must be a string

Test with none in first argument
---------------------------------

    >>> say_my_name(None, "Smith")
    Traceback (most recent call last):
    TypeError: first_name must be a string


Test with integer in second argument
------------------------------------

    >>> say_my_name("John", 1)
    Traceback (most recent call last):
    TypeError: last_name must be a string

Test with Float in second argument
------------------------------------

    >>> say_my_name("John", 1.00)
    Traceback (most recent call last):
    TypeError: last_name must be a string

Test with list in second argument
------------------------------------

    >>> say_my_name("Bob", ['A', 'n', 'a'])
    Traceback (most recent call last):
    TypeError: last_name must be a string

Test with none in second argument
------------------------------------

    >>> say_my_name("Bob", None)
    Traceback (most recent call last):
    TypeError: last_name must be a string

Testing Arguments
=================
This program has a minimun arguments needed: 1.
and has a maximum argument: 2.

Test empty Arguments
---------------------

    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

Test 1 Argument
----------------
    >>> say_my_name("Bob")
    My name is Bob 

Test 2 Arguments
----------------
    >>> say_my_name("Bob", "Smith")
    My name is Bob Smith

Test 3 Arguments
----------------
    >>> say_my_name("Ana", "Chris", "Paul")
    Traceback (most recent call last):
    TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given
